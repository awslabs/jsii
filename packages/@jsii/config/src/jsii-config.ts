import type { AssemblyTargets } from '@jsii/spec';

/**
 * Configuration of a jsii project.
 */
export type JsiiConfig =
  | JsiiConfigWithManagedTypeScript
  | JsiiConfigWithUserManagedTypeScript;

/**
 * The configuration for jsii projects that have a managed tsconfig.json file.
 * Those projects get their configuration from package.json.
 */
export interface JsiiConfigWithManagedTypeScript extends JsiiConfigBase {
  readonly configStyle: JsiiConfigStyle.PACKAGE_JSON;

  /**
   * The TypeScript configuration to use for this project. This only contains a
   * limited subset of the TypeScript configuration file (waht can be configured
   * through the `jsii.tsc` key in package.json). The `jsii` compiler owns the
   * default values for those properties, and what the rest of the configuration
   * looks like.
   */
  readonly tsconfig?: TypeScriptConfig;
}

/**
 * The configuration for jsii projects that have a user-owned tsconfig.json
 * file. Those projects get their cofiguration from tsconfig.json.
 */
export interface JsiiConfigWithUserManagedTypeScript extends JsiiConfigBase {
  readonly configStyle: JsiiConfigStyle.TSCONFIG_JSON;
}

/**
 * Basic configuration of a jsii project. It may be hosted directly in the
 * package.json file (under the `jsii` key), or in the tsconfig.json file, under
 * the `x-jsii` key.
 */
export interface JsiiConfigBase {
  /**
   * A value that indicates how this project was configured.
   */
  readonly configStyle: JsiiConfigStyle;

  /**
   * Diagnostic message severity configuration.
   */
  readonly diagnostics?: {
    readonly [code: string]: DiagnosticCategory;
  };

  /**
   * Any metadata attached to this project. The meaning of those is application
   * dependent.
   */
  readonly metadata?: { readonly [key: string]: unknown };

  /**
   * The root directory in which files generated by `jsii-pacmak` will be
   * placed. This property contains an absolute path (relative paths will be
   * resolved from the project root).
   */
  readonly outdir: string;

  /**
   * The root directory in which the project is located. This property contains
   * the absolute path (if a relative path was provided, it will be resolved
   * from the process' working directory).
   */
  readonly projectRoot: string;

  /**
   * Configuration for `jsii-pacmak` targets.
   */
  readonly targets: AssemblyTargets & JavaScriptTarget;

  /**
   * How jsii versions will be emitted in the generated assemblies. One of:
   *
   * - 'full': the full version (including commit prefix) will be emitted
   * - 'short': only the version number will be emitted
   */
  readonly versionFormat: 'full' | 'short';
}

/**
 * Targets that include JavaScript configuration (this target is implicitly
 * configured on all jsii projects).
 */
export interface JavaScriptTarget {
  /**
   * Configuration for the javaScript target.
   */
  readonly js: {
    /**
     * The name of the npm package that is represented by this project.
     */
    readonly npm: string;
  };
}

/**
 * Various ways in which jsii projects can be configured.
 */
export const enum JsiiConfigStyle {
  /** The project was configured directly in package.json */
  PACKAGE_JSON = 'package.json',
  /** The project was configured in tsconfig.json */
  TSCONFIG_JSON = 'tsconfig.json',
}

export interface TypeScriptConfig {
  readonly compilerOptions?: {
    readonly outDir?: string;
    readonly rootDir?: string;
  };
  readonly exclude?: readonly string[];
  readonly references?: boolean;
}

export const enum DiagnosticCategory {
  Error = 'error',
  Warning = 'warning',
  Suggestion = 'suggestion',
  Message = 'message',
}
